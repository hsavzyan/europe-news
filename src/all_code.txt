import "./Header.css";

const Header = () => {
  return (
    <header className="header">
      <div className="header-content">
        <h1 className="header-title">GuardianEuropa</h1>
        <p className="header-tagline">Your trusted source for European news</p>
      </div>
    </header>
  );
};

export default Header;
import { useEffect, useState } from "react";
import axios from "axios";
import { MdArrowBack } from "react-icons/md";

const API_KEY = import.meta.env.VITE_GUARDIAN_API_KEY;
const API_ENDPOINT = "https://content.guardianapis.com";

function Article({ id, onBack }) {
  const [articleData, setArticleData] = useState(null);

  useEffect(() => {
    const fetchArticle = async () => {
      const res = await axios.get(
        `${API_ENDPOINT}/${id}?api-key=${API_KEY}&show-fields=all`
      );
      setArticleData(res.data.response.content);
    };

    fetchArticle();
  }, [id]);

  if (!articleData) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <button onClick={onBack}>
        <MdArrowBack /> Back
      </button>{" "}
      {/* add back button */}
      <h2>{articleData.webTitle}</h2>
      <p>{articleData.fields.trailText}</p>
      <img src={articleData.fields.thumbnail} alt={articleData.webTitle} />
      <p>Image text and photographer's name not available</p>
      <p>By {articleData.fields.byline}</p>
      <p>
        Published on{" "}
        {new Date(articleData.webPublicationDate).toLocaleDateString("en-GB", {
          weekday: "short",
          day: "2-digit",
          month: "short",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        })}
      </p>
      <div dangerouslySetInnerHTML={{ __html: articleData.fields.body }} />
    </div>
  );
}

export default Article;
import { MdSchedule } from "react-icons/md";
import "./NewsCard.css";

export default function NewsCard({ newsItem, onClick }) {
  const time = new Date(newsItem.webPublicationDate).toLocaleTimeString(
    "en-US",
    {
      hour: "2-digit",
      minute: "2-digit",
    }
  );

  return (
    <div className="news-card" onClick={() => onClick(newsItem.id)}>
      <div>
        <img
          src={newsItem.fields.thumbnail}
          alt={newsItem.webTitle}
          className="news-image"
        />
        <h2 className="news-title" onClick={() => onClick(newsItem.id)}>
          {newsItem.webTitle}
        </h2>
        <p className="news-text">{newsItem.fields.trailText}</p>
      </div>
      <div className="time-container">
        <MdSchedule size={20} className="time-icon" />
        <p>{time}</p>
      </div>
    </div>
  );
}
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
import { useEffect, useState } from "react";
import axios from "axios";
import NewsCard from "./NewsCard";
import { FiChevronRight, FiChevronLeft } from "react-icons/fi";
import "./App.css";
import Header from "./Header";
import Article from "./Article";

const TOTAL_PAGES = 10; // define your total pages
const API_KEY = import.meta.env.VITE_GUARDIAN_API_KEY;
const API_ENDPOINT = "https://content.guardianapis.com/world/europe-news";

function App() {
  const [newsData, setNewsData] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [error, setError] = useState(null);
  const [selectedNewsId, setSelectedNewsId] = useState(null);

  // Function to format the date
  const formatDate = (date) => {
    return date.toISOString().split("T")[0];
  };

  const clearSelectedNewsId = () => {
    setSelectedNewsId(null);
  };

  useEffect(() => {
    const fetchNews = async () => {
      try {
        const res = await axios.get(
          `${API_ENDPOINT}?api-key=${API_KEY}&show-fields=all&page=${currentPage}&page-size=10`
        );

        const newsByDate = {};
        for (const newsItem of res.data.response.results) {
          const date = formatDate(new Date(newsItem.webPublicationDate));
          if (!newsByDate[date]) {
            newsByDate[date] = [];
          }
          newsByDate[date].push(newsItem);
        }

        setNewsData(newsByDate);
        window.scrollTo(0, 0); // scroll to top here
      } catch (error) {
        setError(error.message);
      }
    };

    fetchNews();
  }, [currentPage]);

  const goToPage = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const generatePageNumbers = () => {
    let pages = [];
    for (let i = 0; i < TOTAL_PAGES; i++) {
      pages.push(
        <button
          key={i}
          onClick={() => goToPage(i + 1)}
          className={i + 1 === currentPage ? "font-bold" : ""}
        >
          {i + 1}
        </button>
      );
    }
    return pages;
  };

  if (error) {
    return <div>Error: {error}</div>;
  }

  return (
    <div className="container">
      <Header />
      {selectedNewsId ? (
        <Article id={selectedNewsId} onBack={clearSelectedNewsId} />
      ) : (
        Object.entries(newsData).map(([date, newsItems]) => (
          <div key={date} className="day-news grid grid-cols-news">
            <div className="date-container">
              <p className="date-title">
                {new Date(date).toLocaleDateString("en-US", {
                  weekday: "long",
                  day: "2-digit",
                  month: "long",
                  year: "numeric",
                })}
              </p>
            </div>
            <div className="news-grid">
              {newsItems.map((newsItem) => (
                <NewsCard
                  key={newsItem.id}
                  newsItem={newsItem}
                  onClick={setSelectedNewsId}
                />
              ))}
            </div>
          </div>
        ))
      )}
      {!selectedNewsId && ( // only show pagination when no article is selected
        <div className="page-controls">
          <button
            onClick={() => goToPage(currentPage - 1)}
            disabled={currentPage === 1}
          >
            <FiChevronLeft />
          </button>
          {generatePageNumbers()}
          {currentPage < TOTAL_PAGES && <p>...</p>}
          <button
            onClick={() => goToPage(currentPage + 1)}
            disabled={currentPage === TOTAL_PAGES}
          >
            <FiChevronRight />
          </button>
        </div>
      )}
    </div>
  );
}

export default App;
